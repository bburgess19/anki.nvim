==============================================================================
Plugin for operating with anki directly from neovim                       *anki*

==============================================================================
Introduction                                                 *anki.Introduction*

This plugin allows to create (and edit in future) Anki card from from Neovim

==============================================================================
Configuration                                               *anki.Configuration*

 See |anki.Config|

==============================================================================
Open notes from anki                                    *anki.OpenNotesFromAnki*

 If you want to edit your notes directly from Anki using this neovim and this plugin
 check out this anki addon https://ankiweb.net/shared/info/220273024

==============================================================================
Usage                                                               *anki.Usage*

 Setup your config. See |anki.Config|
 Launch your anki
 Enter a filename with `.anki` extension
 Create a form using `:Anki <your notetype>` command
 Fill it with information you want to remember.
 Send it to anki directly using `:AnkiSend` or send it to `Add` GUI using `:AnkiSendGui` if you want to add picture

==============================================================================
Linter                                                             *anki.Linter*

Allows of "statically" checking cards before you sending them to Anki.
See |anki.Linter|

You can define a bunch of function which given fields from the buffer can report various errors (spellchecking, too long lines, etc.) which will show up in `nvim` diagnostics.
Kind of like "LSP" for your Anki cards.

Can be set in either the configuration |anki.Config| or in buffer (`vim.b.anki.linters`) or global (`vim.b.anki.linters`) variables

Example:
Show errors if any of the lines or fields are too long
>lua
 {
        linter = function(fields, form)
            local ret = {}
            for field, lines in pairs(fields) do
                local counter = 0
                for ln, line in ipairs(lines) do
                    if #line >= line_size then
                        table.insert(ret, {
                            message = "this line is too long " .. #line,
                            lnum = lines.line_number + ln,
                            col = 0,
                        })
                    end
                    counter = counter + #line
                end
                if counter >= field_size then
                    table.insert(ret, {
                        message = "this field has way too much characters" .. counter,
                        lnum = lines.line_number,
                        col = 0,
                    })
                end
            end
            return ret
        end,
        name = "size",
 }
<

Linter                                                                  *Linter*
    Linter type

    Fields: ~
        {condition}  (fun(form:Form):boolean|nil)                          If `condition` is a function and it returs `true` run this linter, if `false` do not run it. If `condition` is assigned to `nil` run it always
        {linter}     (fun(fields:table<string,string[]>,form:Form):table)  Function that returns table of diagnostics (with structure that of |diagnostic-structure|(see `:h diagnostic-structure`) for the given fields. Each field is a table from name of that field to array of strings (content inside that field) it also has `line_number` field which indicates the line at which the field at starts (it lets you set `lnum` inside the returned diagnostic table, `line_number + 1` would indicate the first line in that field etc.)
        {name}       (string)                                              Name for error purposes


Form                                                                      *Form*
    Form type

    Fields: ~
        {modelName}  (string)    Name of the note (model)
        {deckName?}  (string)    Name of the deck
        {noteId?}    (number)    Id of the Note
        {tags}       (string[])  Table of tags
        {fields}     (table)     Table of name of a Field to array of strings of content inside that field


==============================================================================
Transformer                                                   *anki.Transformer*

Allows of programatically transforming your cards before sending them to Anki.
See |anki.Transformer|

You can define a bunch of function which given fields from the buffer can transform fields
of your cards (correct misspells, capitlize certain fields etc.).

Can be set in either the configuration |anki.Config| or in buffer (`vim.b.anki.transformers`) or global (`vim.b.anki.transformers`) variables

Example:
Runs `titlecase`(https://github.com/wezm/titlecase) binary on specific content from
a specific field, which automitacally capitlizes the content inside that field.

>lua
 {
    condition = function(note)
        return note.modelName == "Definition"
    end,

    transformation = function(fields)
        local stdout = vim.system({ "titlecase" }, { stdin = fields["Concept"] }):wait().stdout or ""
        fields["Concept"] = vim.split(stdout:sub(1, #stdout - 1), "\n")
        return fields
    end,

    name = "uppercase-Concept-Field",
 },
<

Transformer                                                        *Transformer*
    Transformer type

    Fields: ~
        {condition}       (fun(form:Form):boolean|nil)                                           If `condition` is a function and it returs `true` run this linter, if `false` do not run it. If `condition` is assigned to `nil` run it always
        {transformation}  (fun(fields:table<string,string[]>,form:Form):table<string,string[]>)  Function which does the transformation on the fields and then returns it
        {name}            (string)                                                               Name for error reporting purposes


==============================================================================
Context                                                           *anki.Context*

 Context can be used to prefill certain `field`s or `tag` during the creation of the buffer form using |anki.anki|
 This can be used to mimic the idea of sticky fields from anki's 'Add' menu but with more control.

 Context can be set either setting global variable |vim.g.anki_context| or using |:AnkiSetContext| command.
>lua
 vim.g.anki_context = { tags = "Rust ComputerScience", fields = { Context = "Rust" } }
 vim.g.anki_context = "nvim"
<
 If context is a `string` your config's `contexts` subtable will be checked for corresponding value.
 Contexts can be specified in your config like so
>lua
 contexts = {
   nvim = {
     tags = "shortcuts::nvim nvim",
     fields = {
       Context = "nvim",
     },
   },
 },
<

==============================================================================
Highlights                                                     *anki.Highlights*

There are following highlights with their default values
>lua
 vim.api.nvim_set_hl(0, "ankiHtmlItalic", { italic = true })
 vim.api.nvim_set_hl(0, "ankiHtmlBold", { bold = true })
 vim.api.nvim_set_hl(0, "ankiDeckname", { link = "Special" })
 vim.api.nvim_set_hl(0, "ankiModelname", { link = "Special" })
 vim.api.nvim_set_hl(0, "ankiTags", { link = "Special" })
 vim.api.nvim_set_hl(0, "ankiField", { link = "@namespace" })
<

==============================================================================
TexSupport                                                     *anki.TexSupport*

With this enabled files with `.anki` extension will be set to filetype `anki.tex` instead of simply `anki`
And it also will add
>lua
 \documentclass[11pt, a4paper]{article}
 \usepackage{amsmath}
 \usepackage{amssymb}
 \begin{document}
   <rest of the form>
 \end{document}
<
To the buffer when |anki.anki| is run
This allows usage of vimtex, tex snippets etc. while creating anki cards.

==============================================================================
Clozes                                                             *anki.Clozes*

If you are using luasnip you can use something like this to create clozes more easily.
>lua
 local function cloze_same_line(_, _, _, _)
   local a = vim.g.anki_cloze or 1
   local t0 = t({ "{{c" .. a .. "::#" })
   local t1 = i(1)
   local t2 = t({ "}}" })
   local t3 = i(0)
   vim.g.anki_cloze = a + 1
   return sn(nil, { t0, t1, t2, t3 })

   s("CT", {
     d(1, cloze_same_line, {}, {}),
   }),
 end
<

Config                                                                  *Config*

    Fields: ~
        {tex_support}                 (boolean)               Basic support for latex inside the `anki` filetype. See |anki.texSupport|.
        {models}                      (table<string,string>)  Table of name of notetypes (keys) to name of decks (values). Which notetype should be send to which deck
        {contexts}                    (table|nil)             Table of context names as keys with value of table with `tags` and `fields`. See |anki.context|.
        {move_cursor_after_creation}  (boolean)               If `true` it will move the cursor the position of the first field
        {linters}                     (Linter[]|nil)          Your linters see |anki.linter|
        {transformers}                (Transformer[]|nil)     Your transformers |anki.transformer|
        {xclip_path}                  (string)                Path to the `xclip` binary
        {base64_path}                 (string)                Path to the `base64` binary


==============================================================================
                                                                      *anki.api*

anki.anki({arg})                                                 *anki.api.anki*
     Given `arg` a name of a notetype. Fills the current buffer with a form which later can be send to anki using |anki.api.send| or |anki.api.sendgui|.

     Name of the fields on the form depend on the `arg`
     Name of the deck depends on `arg` and user's config

    Parameters: ~
        {arg}  (string)


                                                         *anki.api.ankiWithDeck*
anki.ankiWithDeck({deckname}, {notetype}, {context})
     Fills the current buffer with a form which later can be send to anki using |api.anki.send| or |api.anki.sendgui|
     Deck to which the card will be sent is specified by `deckname`
     Fields are that of the `notetype`

     It will prefill `fields` and `tags` specified in the `context`. See |anki.context|
     If `context` is of a type `string` it checks user's config. See |anki.Config|
     If `context` is of a type `table` it uses that table directly.

    Parameters: ~
        {deckname}  (string)            Name of Anki's deck
        {notetype}  (string)            Name of Anki' note type
        {context}   (string|table|nil)


anki.ankiWithContext({arg}, {context})                *anki.api.ankiWithContext*
     The same thing as |anki.api.anki| but it will prefill `fields` and `tags` specified in the `context`.
     See |anki.context|

     If `context` is of a type `string` it checks user's config. See |anki.Config|
     If `context` is of a type `table` it uses that table directly.
     If `context` is `nil` it uses value from `vim.g.anki_context` variable.

    Parameters: ~
        {arg}      (string)
        {context}  (string|table|nil)


anki.sendgui()                                                *anki.api.sendgui*
     Sends the current buffer (which can be created using |anki.api.anki|) to the `Add` GUI inside Anki.
     `<br>` is going to be appended to the end of separate lines to get newlines inside Anki.
     It will select the specified inside the buffer note type and deck.
     This will always replace the content inside `Add` and won't do any checks about it.


anki.send({opts})                                                *anki.api.send*
     Sends the current buffer (which can be created using |anki.api.anki|) directly to Anki as
     a new note or if `NOTEID` is present in the buffer, plugin will try to update a note
     with that id.

     '<br>' is going to be appended to the end of separate lines to get newlines inside Anki.


    Parameters: ~
        {opts}  (table|nil)  optional configuration options:
                               • {allow_duplicate} (boolean) If true card will be created even if it is a duplicate
                             @return {successfullyUpdated: boolean?, successfullySent: boolean?}


anki.fill_field_from_last_note()            *anki.api.fill_field_from_last_note*
     Replaces the current line with the content of field whose name is nearest to the cursor
     from the previous sent form


anki.setup({user_cfg})                                          *anki.api.setup*
     Used to crate association of '.anki' extension to 'anki' filetype (or 'tex.anki' if |anki.TexSupport| is enabled in config) and setup the user's config.

    Parameters: ~
        {user_cfg}  (Config)  see |anki.Config|


anki.add_image_from_clipboard()              *anki.api.add_image_from_clipboard*
     Add an image from clipboard to anki's media and inserts a link to it on current cursor position
     Accepted data from clipboard can be raw png, jpg or gif data or path to an image.
     If data is from the clipboard is too big a temporary file (via 'vim.fn.tempname') in 'tempdir' will created.
     Requires 'xclip' and 'base64'


anki.is_locked()                                            *anki.api.is_locked*
    Returns 'true' after buffer was made but has not been yet sent, false otherwise.

    Can be used in thing like lualine as an a visual indicator whatever or card has been sent to anki.

    Returns: ~
        (boolean)


vim:tw=78:ts=8:noet:ft=help:norl:
