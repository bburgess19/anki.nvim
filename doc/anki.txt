================================================================================
Configuration                                               *anki.configuration*

 See |Config|

================================================================================
Usage                                                               *anki.Usage*

 Setup your config. See |anki.Config|
 Launch your anki
 Enter a filename with '.anki' extension
 Create a form using ':Anki <your notetype>' command
 Fill it with information you want to remember.
 Send it to anki directly using ':AnkiSend' or send it to 'Add' GUI using ':AnkiSendGui' if you want to add picture

================================================================================
Context                                                           *anki.Context*

 Context can be used to prefill certain `field`s or `tag` during the creation of the buffer form using |anki.anki|
 This can be used to mimic the idea of sticky fields from anki's 'Add' menu but with more control.

 Context can be set either setting global variable |vim.g.anki_context| or using |:AnkiSetContext| command.
>
 vim.g.anki_context = { tags = "Rust ComputerScience", fields = { Context = "Rust" } }
 vim.g.anki_context = "nvim"
<
 If context is a `string` your config's `contexts` subtable will be checked for corresponding value.
 Contexts can be specified in your config like so
>
 contexts = {
   nvim = {
     tags = "shortcuts::nvim nvim",
     fields = {
       Context = "nvim",
     },
   },
 },
<

================================================================================
Highlights                                                     *anki.Highlights*

There are following highlights with their default values
>
 vim.api.nvim_set_hl(0, "ankiHtmlItalic", { italic = true })
 vim.api.nvim_set_hl(0, "ankiHtmlBold", { bold = true })
 vim.api.nvim_set_hl(0, "ankiDeckname", { link = "Special" })
 vim.api.nvim_set_hl(0, "ankiModelname", { link = "Special" })
 vim.api.nvim_set_hl(0, "ankiTags", { link = "Special" })
 vim.api.nvim_set_hl(0, "ankiField", { link = "@namespace" })
<

================================================================================
TexSupport                                                     *anki.TexSupport*

With this enabled files with '.anki' extension will be set to filetype `anki.tex` instead of simply `anki`
And it also will add
>
 \documentclass[11pt, a4paper]{article}
 \usepackage{amsmath}
 \usepackage{amssymb}
 \begin{document}
   <rest of the form>
 \end{document}
<
To the buffer when |anki.anki| is run
This allows usage of vimtex, tex snippets etc. while creating anki cards.

================================================================================
Clozes                                                             *anki.Clozes*

If you are using luasnip you can use something like this to create clozes more easily.
>
 local function cloze_same_line(_, _, _, _)
   local a = vim.g.anki_cloze or 1
   local t0 = t({ "{{c" .. a .. "::#" })
   local t1 = i(1)
   local t2 = t({ "}}" })
   local t3 = i(0)
   vim.g.anki_cloze = a + 1
   return sn(nil, { t0, t1, t2, t3 })

   s("CT", {
     d(1, cloze_same_line, {}, {}),
   }),
 end
<

Config                                                                  *Config*

    Fields: ~
        {tex_support}  (boolean)  Basic support for latex inside the 'anki' filetype. See |anki.TexSupport|.
        {models}       (table)    Table of name of notetypes (keys) to name of decks (values). Which notetype should be send to which deck
        {contexts}     (table)    Table of context names as keys with value of table with `tags` and `fields`. See |anki.Context|.


anki.anki({arg})                                                     *anki.anki*
     Given `arg` a name of a notetype. Fills the current buffer with a form which later can be send to anki using `send` or `sendgui`.

     Name of the fields on the form depend on the `arg`
     Name of the deck depends on `arg` and user's config

    Parameters: ~
        {arg}  (string)


anki.ankiWithDeck({deckname}, {notetype}, {context})
     Fills the current buffer with a form which later can be send to anki using `send` or `sendgui`.
     Deck to which the card will be sent is specified by 'deckname'
     Fields are that of the 'notetype'

     It will prefill 'fields' and 'tags' specified in the 'context'. See |anki.Context|
     If 'context' is of a type 'string' it check user's config. See |anki.Config|
     If 'context' is of a type 'table' it use that table directly.

    Parameters: ~
        {deckname}  (string)            Name of Anki's deck
        {notetype}  (string)            Name of Anki' note type
        {context}   (string|table|nil)


anki.ankiWithContext({arg}, {context})                    *anki.ankiWithContext*
     The same thing as |anki.anki| but it will prefill 'fields' and 'tags' specified in the 'context'.
     See |anki.Context|

     If 'context' is of a type 'string' it check user's config. See |anki.Config|
     If 'context' is of a type 'table' it use that table directly.
     If 'context' is 'nil' it use value from 'vim.g.anki_context' variable.

    Parameters: ~
        {arg}      (string)
        {context}  (string|table|nil)


anki.sendgui()                                                    *anki.sendgui*
     Sends the current buffer (which can be created using |anki.anki|) to the 'Add' GUI inside Anki.
     '<br>' is going to be appended to the end of seperate lines to get newlines inside Anki.
     It will select the specified inside the buffer note type and deck.
     This will always replace the content inside 'Add' and won't do any checks about it.


anki.send()                                                          *anki.send*
     Sends the current buffer (which can be created using |anki.anki|) directly to Anki.
     '<br>' is going to be appended to the end of seperate lines to get newlines inside Anki.
     It will send it to the specified inside the buffer deck using specified note type.
     If duplicate in the specified deck is detected the card won't be created and user will be prompted about it.


anki.setup({user_cfg})                                              *anki.setup*
     Used to crate association of '.anki' extension to 'anki' filetype ('tex.anki' if |anki.TexSupport| is enabled in config) and setup the user's config.

    Parameters: ~
        {user_cfg}  (Config)  see |Config|


vim:tw=78:ts=8:noet:ft=help:norl:
